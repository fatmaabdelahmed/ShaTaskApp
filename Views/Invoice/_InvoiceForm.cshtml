@model ShaTaskApp.ViewModels.InvoiceCreateEditViewModel

@{
    var isEdit = Model.ID > 0;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="card-title mb-0">
                        <i class="fas @(isEdit ? "fa-edit" : "fa-plus")"></i>
                        @ViewData["Title"]
                    </h3>
                </div>
                <div class="card-body">
                    <form asp-action="@(isEdit ? "Edit" : "Create")" method="post" id="invoiceForm">
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                        @if (isEdit)
                        {
                            <input asp-for="ID" type="hidden" />
                        }

                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label asp-for="CustomerName" class="form-label required">
                                        <i class="fas fa-user"></i>
                                        @Html.DisplayNameFor(m => m.CustomerName)
                                    </label>
                                    <input asp-for="CustomerName" class="form-control" placeholder="أدخل اسم العميل" />
                                    <span asp-validation-for="CustomerName" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label asp-for="Invoicedate" class="form-label required">
                                        <i class="fas fa-calendar"></i>
                                        @Html.DisplayNameFor(m => m.Invoicedate)
                                    </label>
                                    <input asp-for="Invoicedate" class="form-control" type="date" />
                                    <span asp-validation-for="Invoicedate" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label asp-for="BranchID" class="form-label required">
                                        <i class="fas fa-store"></i>
                                        @Html.DisplayNameFor(m => m.BranchID)
                                    </label>
                                    <select asp-for="BranchID" class="form-select" id="branchSelect">
                                        <option value="">اختر الفرع</option>
                                        @if (ViewBag.Branches != null)
                                        {
                                            foreach (var branch in (List<ShaTaskApp.Models.Branch>)ViewBag.Branches)
                                            {
                                                <option value="@branch.ID">@branch.BranchName</option>
                                            }
                                        }
                                    </select>
                                    <span asp-validation-for="BranchID" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label asp-for="CashierID" class="form-label">
                                        <i class="fas fa-user-tie"></i>
                                        @Html.DisplayNameFor(m => m.CashierID)
                                    </label>
                                    <select asp-for="CashierID" class="form-select" id="cashierSelect">
                                        <option value="">اختر الكاشير</option>
                                    </select>
                                    <span asp-validation-for="CashierID" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="card mb-4">
                            <div class="card-header bg-light">
                                <h5 class="mb-0">
                                    <i class="fas fa-list"></i>
                                    أصناف الفاتورة
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <button type="button" class="btn btn-success btn-sm" id="addItemBtn">
                                        <i class="fas fa-plus"></i>
                                        إضافة صنف
                                    </button>
                                </div>

                                <div class="table-responsive">
                                    <table class="table table-bordered" id="itemsTable">
                                        <thead class="table-light">
                                            <tr>
                                                <th style="width: 40%">اسم الصنف</th>
                                                <th style="width: 15%">الكمية</th>
                                                <th style="width: 20%">السعر</th>
                                                <th style="width: 20%">الإجمالي</th>
                                                <th style="width: 5%">العمليات</th>
                                            </tr>
                                        </thead>
                                        <tbody id="itemsTableBody">
                                            @if (Model.InvoiceDetails != null && Model.InvoiceDetails.Any())
                                            {
                                                @for (int i = 0; i < Model.InvoiceDetails.Count; i++)
                                                {
                                                    <tr class="item-row" data-index="@i">
                                                        <td>
                                                            <input asp-for="InvoiceDetails[@i].ItemName" class="form-control item-name" placeholder="اسم الصنف" />
                                                            <span asp-validation-for="InvoiceDetails[@i].ItemName" class="text-danger"></span>
                                                        </td>
                                                        <td>
                                                            <input asp-for="InvoiceDetails[@i].ItemCount" class="form-control item-count" type="number" step="0.01" min="0.01" placeholder="الكمية" />
                                                            <span asp-validation-for="InvoiceDetails[@i].ItemCount" class="text-danger"></span>
                                                        </td>
                                                        <td>
                                                            <input asp-for="InvoiceDetails[@i].ItemPrice" class="form-control item-price" type="number" step="0.01" min="0.01" placeholder="السعر" />
                                                            <span asp-validation-for="InvoiceDetails[@i].ItemPrice" class="text-danger"></span>
                                                        </td>
                                                        <td>
                                                            <input type="text" class="form-control item-total" readonly />
                                                        </td>
                                                        <td>
                                                            <button type="button" class="btn btn-danger btn-sm remove-item">
                                                                <i class="fas fa-trash"></i>
                                                            </button>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                        <tfoot>
                                            <tr class="table-info">
                                                <td colspan="3" class="text-end"><strong>الإجمالي العام:</strong></td>
                                                <td><strong id="grandTotal">0.00</strong></td>
                                                <td></td>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <button type="submit" class="btn btn-primary btn-lg">
                                            <i class="fas fa-save"></i>
                                            @(isEdit ? "حفظ التعديلات" : "حفظ الفاتورة")
                                        </button>
                                        <a asp-action="Index" class="btn btn-secondary btn-lg ms-2">
                                            <i class="fas fa-times"></i>
                                            إلغاء
                                        </a>
                                    </div>
                                    <div class="text-end">
                                        <h4 class="text-success">
                                            الإجمالي: <span id="totalDisplay">0.00</span> ج.م
                                        </h4>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<template id="itemRowTemplate">
    <tr class="item-row">
        <td>
            <input name="InvoiceDetails[INDEX].ItemName" class="form-control item-name" placeholder="اسم الصنف" />
        </td>
        <td>
            <input name="InvoiceDetails[INDEX].ItemCount" class="form-control item-count" type="number" step="0.01" min="0.01" placeholder="الكمية" />
        </td>
        <td>
            <input name="InvoiceDetails[INDEX].ItemPrice" class="form-control item-price" type="number" step="0.01" min="0.01" placeholder="السعر" />
        </td>
        <td>
            <input type="text" class="form-control item-total" readonly />
        </td>
        <td>
            <button type="button" class="btn btn-danger btn-sm remove-item">
                <i class="fas fa-trash"></i>
            </button>
        </td>
    </tr>
</template>

<style>
    .required::after {
        content: " *";
        color: red;
    }

    .item-row {
        transition: all 0.3s ease;
    }

        .item-row:hover {
            background-color: #f8f9fa;
        }

    .item-total {
        background-color: #e9ecef !important;
        font-weight: bold;
    }

    #grandTotal, #totalDisplay {
        font-size: 1.2em;
        font-weight: bold;
        color: #28a745;
    }

    .form-control:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .item-row {
        animation: fadeIn 0.3s ease-in;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    
    }

    .removing {
        animation: fadeOut 0.3s ease-out;
    }

    @@keyframes fadeOut {
        from {
            opacity: 1;
            transform: translateY(0);
        }

        to {
            opacity: 0;
            transform: translateY(-10px);
        }
    }

    #addItemBtn {
        transition: all 0.2s ease;
    }

        #addItemBtn:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

    .remove-item {
        transition: all 0.2s ease;
    }

        .remove-item:hover {
            transform: scale(1.05);
        }

    .table th {
        white-space: nowrap;
        vertical-align: middle;
        background-color: #f8f9fa;
        border-color: #dee2e6;
    }

    .table td {
        vertical-align: middle;
    }

    .table-responsive {
        border-radius: 0.375rem;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .text-danger {
        font-size: 0.875em;
        margin-top: 0.25rem;
        display: block;
    }

    .is-invalid {
        border-color: #dc3545;
        padding-right: calc(1.5em + 0.75rem);
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }

    .card {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        border: 1px solid rgba(0, 0, 0, 0.125);
    }

    .card-header {
        background-color: #007bff;
        border-bottom: 1px solid rgba(0, 0, 0, 0.125);
    }

    .highlight {
        background-color: #fff3cd !important;
        transition: background-color 0.5s ease;
    }

    @@media (max-width: 768px) {
        .table-responsive {
            font-size: 0.875rem;
        }

    .btn-lg {
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
    }

    #totalDisplay {
        font-size: 1rem;
    }

    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        let itemIndex = document.querySelectorAll('.item-row').length;

        initializeForm();

        document.getElementById('addItemBtn').addEventListener('click', function() {
            addNewItem();
        });

        document.addEventListener('click', function(e) {
            if (e.target.closest('.remove-item')) {
                e.preventDefault();
                removeItem(e.target.closest('.item-row'));
            }
        });

        document.addEventListener('input', function(e) {
            if (e.target.classList.contains('item-count') || e.target.classList.contains('item-price')) {
                updateRowTotal(e.target.closest('.item-row'));
                updateGrandTotal();
            }
        });

        document.getElementById('branchSelect').addEventListener('change', function() {
            loadCashiersByBranch(this.value);
        });

        document.getElementById('invoiceForm').addEventListener('submit', function(e) {
            if (!validateForm()) {
                e.preventDefault();
            }
        });

        function initializeForm() {
            document.querySelectorAll('.item-row').forEach(row => {
                updateRowTotal(row);
            });
            updateGrandTotal();

            if (document.querySelectorAll('.item-row').length === 0) {
                addNewItem();
            }

            const branchSelect = document.getElementById('branchSelect');
            if (branchSelect.value) {
                loadCashiersByBranch(branchSelect.value);
            }
        }

        function addNewItem() {
            const template = document.getElementById('itemRowTemplate');
            const clone = template.content.cloneNode(true);

            updateCloneIndices(clone, itemIndex);

            const row = clone.querySelector('.item-row');
            row.setAttribute('data-index', itemIndex);

            document.getElementById('itemsTableBody').appendChild(clone);

            const newRow = document.querySelector(`[data-index="${itemIndex}"]`);
            const firstInput = newRow.querySelector('.item-name');
            if (firstInput) {
                firstInput.focus();
            }

            itemIndex++;
            updateGrandTotal();
        }

        function removeItem(row) {
            if (document.querySelectorAll('.item-row').length <= 1) {
                showAlert('يجب أن تحتوي الفاتورة على صنف واحد على الأقل', 'warning');
                return;
            }

            row.classList.add('removing');

            setTimeout(() => {
                row.remove();
                updateItemIndices();
                updateGrandTotal();
            }, 300);
        }

        function updateCloneIndices(clone, index) {
            const inputs = clone.querySelectorAll('input');
            inputs.forEach(input => {
                if (input.name) {
                    input.name = input.name.replace('INDEX', index);
                }
            });
        }

        function updateItemIndices() {
            document.querySelectorAll('.item-row').forEach((row, index) => {
                row.setAttribute('data-index', index);

                const inputs = row.querySelectorAll('input');
                inputs.forEach(input => {
                    if (input.name && input.name.includes('InvoiceDetails[')) {
                        const namePattern = /InvoiceDetails\[\d+\]/;
                        input.name = input.name.replace(namePattern, `InvoiceDetails[${index}]`);
                    }
                });
            });

            itemIndex = document.querySelectorAll('.item-row').length;
        }

        function updateRowTotal(row) {
            const countInput = row.querySelector('.item-count');
            const priceInput = row.querySelector('.item-price');
            const totalInput = row.querySelector('.item-total');

            const count = parseFloat(countInput.value) || 0;
            const price = parseFloat(priceInput.value) || 0;
            const total = count * price;

            totalInput.value = formatNumber(total);

            totalInput.classList.add('highlight');
            setTimeout(() => {
                totalInput.classList.remove('highlight');
            }, 500);
        }

        function updateGrandTotal() {
            let grandTotal = 0;

            document.querySelectorAll('.item-row').forEach(row => {
                const totalInput = row.querySelector('.item-total');
                const total = parseFloat(totalInput.value.replace(/,/g, '')) || 0;
                grandTotal += total;
            });

            document.getElementById('grandTotal').textContent = formatNumber(grandTotal);
            document.getElementById('totalDisplay').textContent = formatNumber(grandTotal);
        }

        function loadCashiersByBranch(branchId) {
            const cashierSelect = document.getElementById('cashierSelect');

            cashierSelect.innerHTML = '<option value="">جاري التحميل...</option>';
            cashierSelect.disabled = true;

            if (!branchId) {
                cashierSelect.innerHTML = '<option value="">اختر الكاشير</option>';
                cashierSelect.disabled = false;
                return;
            }

            fetch(`/Invoice/GetCashiersByBranch?branchId=${branchId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(cashiers => {
                    cashierSelect.innerHTML = '<option value="">اختر الكاشير</option>';

                    cashiers.forEach(cashier => {
                        const option = document.createElement('option');
                        option.value = cashier.ID;
                        option.textContent = cashier.Name;
                        cashierSelect.appendChild(option);
                    });

                    cashierSelect.disabled = false;
                })
                .catch(error => {
                    console.error('Error fetching cashiers:', error);
                    cashierSelect.innerHTML = '<option value="">خطأ في تحميل البيانات</option>';
                    cashierSelect.disabled = false;
                    showAlert('حدث خطأ في تحميل بيانات الكاشيرين', 'error');
                });
        }

        function validateForm() {
            let isValid = true;
            const errors = [];

            const customerName = document.querySelector('[name="CustomerName"]');
            if (!customerName.value.trim()) {
                errors.push('اسم العميل مطلوب');
                customerName.classList.add('is-invalid');
                isValid = false;
            } else {
                customerName.classList.remove('is-invalid');
            }

            const branchId = document.querySelector('[name="BranchID"]');
            if (!branchId.value) {
                errors.push('الفرع مطلوب');
                branchId.classList.add('is-invalid');
                isValid = false;
            } else {
                branchId.classList.remove('is-invalid');
            }

            const itemRows = document.querySelectorAll('.item-row');
            let hasValidItems = false;

            itemRows.forEach(row => {
                const itemName = row.querySelector('.item-name');
                const itemCount = row.querySelector('.item-count');
                const itemPrice = row.querySelector('.item-price');

                let rowValid = true;

                if (!itemName.value.trim()) {
                    itemName.classList.add('is-invalid');
                    rowValid = false;
                } else {
                    itemName.classList.remove('is-invalid');
                }

                if (!itemCount.value || parseFloat(itemCount.value) <= 0) {
                    itemCount.classList.add('is-invalid');
                    rowValid = false;
                } else {
                    itemCount.classList.remove('is-invalid');
                }

                if (!itemPrice.value || parseFloat(itemPrice.value) <= 0) {
                    itemPrice.classList.add('is-invalid');
                    rowValid = false;
                } else {
                    itemPrice.classList.remove('is-invalid');
                }

                if (rowValid) {
                    hasValidItems = true;
                }
            });

            if (!hasValidItems) {
                errors.push('يجب إدخال صنف واحد صحيح على الأقل');
                isValid = false;
            }

            if (errors.length > 0) {
                showAlert(errors.join('<br>'), 'error');
            }

            return isValid;
        }

        function formatNumber(number) {
            return new Intl.NumberFormat('ar-EG', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }).format(number);
        }

        function showAlert(message, type = 'info') {
            
            const alert = document.createElement('div');
            alert.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show`;
            alert.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;

            const form = document.getElementById('invoiceForm');
            form.insertBefore(alert, form.firstChild);

            setTimeout(() => {
                if (alert.parentNode) {
                    alert.remove();
                }
            }, 5000);
        }
    });
</script>